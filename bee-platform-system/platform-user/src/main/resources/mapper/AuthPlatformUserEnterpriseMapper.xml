<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.bee.platform.user.authority.dao.mapper.AuthPlatformUserEnterpriseMapper">

    <!-- 通用查询映射结果 -->
    <resultMap id="BaseResultMap" type="com.bee.platform.user.authority.entity.AuthPlatformUserEnterprise">
        <id column="id" property="id" />
        <result column="user_id" property="userId" />
        <result column="enterprise_id" property="enterpriseId" />
        <result column="departments_id" property="departmentsId" />
        <result column="post_id" property="postId" />
        <result column="status" property="status" />
        <result column="deleted" property="deleted" />
        <result column="create_user" property="createUser" />
        <result column="create_time" property="createTime" />
        <result column="update_time" property="updateTime" />
    </resultMap>

    <!-- 通用查询结果列 -->
    <sql id="Base_Column_List">
        id, user_id, enterprise_id,departments_id,post_id, status, deleted, create_user, create_time, update_time
    </sql>

    <insert id="batchInsert" useGeneratedKeys="true" keyProperty="id">
        insert into auth_platform_user_enterprise (user_id,enterprise_id,departments_id,post_id,status,deleted,create_user,create_time,update_time) values
        <foreach collection="list" item="e" separator=",">
            (
            #{e.userId,jdbcType=INTEGER},
            #{e.enterpriseId,jdbcType=INTEGER},
            #{e.departmentsId,jdbcType=INTEGER},
            #{e.postId,jdbcType=INTEGER},
            #{e.status,jdbcType=INTEGER},
            #{e.deleted,jdbcType=INTEGER},
            #{e.createUser,jdbcType=INTEGER},
            #{e.createTime,jdbcType=TIMESTAMP},
            #{e.updateTime,jdbcType=TIMESTAMP}
            )
        </foreach>
    </insert>

    <select id="findUserEnterpriseInfo" resultType="com.bee.platform.user.authority.dto.AuthPlatformUserDto">
        select apue.status, ae.id enterpriseId,ae.name enterpriseName,
        ae.simple_name enterpriseSimpleName, d.name departmentName, p.name postName,
        p.id postId, d.id departmentId
        from auth_platform_user_enterprise apue
        left join auth_enterprise ae on apue.enterprise_id = ae.id and ae.deleted = 0 and ae.status = 1
        left join departments d on d.id = apue.departments_id
        left join z_post p on p.id = apue.post_id and p.status = 1
        where apue.deleted = 0 and apue.enterprise_id = #{enterpriseId}
        and apue.user_id = #{userId}
    </select>

    <select id="findUserDepartmentAndPostInfo" resultType="com.bee.platform.user.authority.dto.AuthEnterpriseDepartmentPostDto">
        select apue.status, ae.id enterpriseId,ae.name enterpriseName,
        ae.simple_name enterpriseSimpleName, d.name departmentName, p.name postName,
        p.id postId, d.id departmentId
        from auth_platform_user_enterprise apue
        left join auth_enterprise ae on apue.enterprise_id = ae.id and ae.deleted = 0 and ae.status = 1
        left join departments d on d.id = apue.departments_id
        left join z_post p on p.id = apue.post_id and p.status = 1
        where apue.deleted = 0
        and apue.user_id = #{userId}
        <if test="enterpriseIds != null">
            and ae.id in (
              <foreach collection="enterpriseIds" item="enterpriseId" separator=",">
                  #{enterpriseId}
              </foreach>
            )
        </if>
        order by apue.update_time desc
    </select>
    <resultMap id="COUNT_ENTERPRISES" type="com.bee.platform.user.dto.EnterprisesCountDTO">
        <result column="enterprise_id" property="orgId" />
        <result column="count" property="count" />
    </resultMap>
    <select id="countUserByOrgIds" parameterType="java.lang.Integer" resultMap="COUNT_ENTERPRISES" >
        select enterprise_id,count(id) as `count` from auth_platform_user_enterprise  where enterprise_id in
        (
        <foreach collection="list" item="item" separator=",">
            #{item}
        </foreach>
        )
        group by enterprise_id
    </select>
    <select id="findUserEnterpriseIds" resultType="int">
        select distinct ae.id from auth_platform_user_enterprise apue
        inner join auth_enterprise ae on ae.id = enterprise_id and ae.status = 1 and ae.deleted = 0
        where apue.status = 1 and apue.deleted = 0 and user_id = #{userId}
        order by apue.create_time desc
    </select>
</mapper>
